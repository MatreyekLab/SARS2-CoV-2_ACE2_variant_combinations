### I THINK THIS IS THE CURRENT STOP POINT```{r Orthologs}#ortholog1_meltcombined2_melted <- melt(combined2[,1:7], id = "plasmid_template")combined2_melted$value <- log10(combined2_melted$value)ortholog_seqs2 <- merge(ortholog_seqs_variable_sites, combined2_melted, by = "plasmid_template")ortholog_seqs3 <- ortholog_seqs2[,7:ncol(ortholog_seqs2)] %>% filter(!(variable %in% c("sd_d614g","sd_alpha","sd_beta","sd_gamma","sd_delta","sd_ba1")))# This is going to be done with the RandomForest package# Calculate the size of each of the data sets:data_set_size <- floor(nrow(ortholog_seqs3)*1)# Generate a random sample of "data_set_size" indexesindexes <- sample(1:nrow(ortholog_seqs3), size = data_set_size)# Assign the data to the correct setstraining1 <- ortholog_seqs3[indexes, !(colnames(ortholog_seqs3) %in% "sequence")]test1 <- ortholog_seqs3[-indexes, !(colnames(ortholog_seqs3) %in% "sequence")]library(randomForest)rf_regression = randomForest(value ~ ., data=training1, ntree=200, mtry=5, importance=TRUE)print(rf_regression)plot(rf_regression)feature_frame <- data.frame("IncMSE" = importance(rf_regression,type = 1))feature_frame2 <- data.frame("IncNodePurity" = importance(rf_regression,type = 2))feature_frame3 <- cbind(feature_frame, feature_frame2)feature_frame3$name <- rownames(feature_frame3)feature_frame3 <- feature_frame3[order(feature_frame3$X.IncMSE),]feature_frame3$name <- factor(feature_frame3$name, levels = feature_frame3$name)rf_regression_importance_plot <- ggplot() + theme_bw() +   labs(x = "% Increase MSE\nupon permutation", y = NULL) +  geom_point(data = feature_frame3, aes(x = X.IncMSE, y = name))rf_regression_importance_plotfeature_frame4 <- data.frame(varImpPlot(rf_regression))feature_frame4$label <- rownames(feature_frame4)rf_importance_scatterplot <- ggplot() +   labs(x = "Increase to MSE", y = "Node purity") +  geom_point(data = feature_frame4, aes(x = X.IncMSE, y = IncNodePurity), alpha = 0.4) +  geom_text_repel(data = feature_frame4 %>% filter(IncNodePurity > 0), aes(x = X.IncMSE, y = IncNodePurity, label = label), color = "red", size = 2, segment.colour = "orange", segment.alpha = 0.4)rf_importance_scatterplotggsave(file = "Plots/rf_importance_scatterplot.pdf", rf_importance_scatterplot, height = 1.3, width = 2.25)## We can now use the trained model on the validation datasetprediction_test <- predict(rf_regression,test1[,colnames(test1) != c("calibrated_score","sequence")])test1$predicted_scores <- prediction_testortholog_seqs2$imputed_score <- predict(rf_regression,ortholog_seqs2[,colnames(ortholog_seqs2) != c("value","plasmid_template","ortholog","mutant","protease","kozak","sequence")])rf_ortholog_predict_scatterplot <- ggplot() +   labs(x = "Measured value", y = "Predicted value") +  #geom_point(data = test1, aes(x = value, y = predicted_scores), alpha = 0.8, fill = "red", shape = 21, color = "black") +  geom_point(data = ortholog_seqs2, aes(x = value, y = imputed_score, fill = variable), alpha = 0.3, shape = 21, fill = "black") +  geom_text(data = ortholog_seqs2 %>% filter(value < 1 & imputed_score > 3), aes(x = value*1.1, y = imputed_score*1.2, label = paste(ortholog,variable)), color = "purple", size = 2)rf_ortholog_predict_scatterplotggsave(file = "Plots/rf_ortholog_predict_scatterplot.pdf", rf_ortholog_predict_scatterplot, height = 1.4, width = 2.25)cor(ortholog_seqs2$value, ortholog_seqs2$imputed_score, method = "pearson")^2training2 <- training1training2$predicted <- rf_regression$predictedggplot() +   geom_point(data = training2, aes(x = value, y = predicted))cor(training2$value, training2$predicted, method = "pearson")^2i21_grouped_data <- ortholog_seqs2 %>% group_by(I21, variable) %>% summarize(mean = mean(value))n49_grouped_data <- ortholog_seqs2 %>% group_by(N49, variable) %>% summarize(mean = mean(value))ggplot() + #geom_jitter(data = ortholog_seqs2, aes(x = I21, y = value)) +  geom_point(data = i21_grouped_data, aes(x = I21, y = mean, color = variable))ggplot() + #geom_jitter(data = ortholog_seqs2, aes(x = I21, y = value)) +  geom_point(data = n49_grouped_data, aes(x = N49, y = mean, color = variable))``````{r First looking at sequence differences between orthologs}# select ace2_intxn, d614g_ace2 and resi 30+31+38+353+45+35+34+37+42+21+24+393+49+83+39+27+28+357+41+82"ortholog_seqs <- read.csv(file = "Keys/Ortholog_seqs.csv", header = T, stringsAsFactors = F)ortholog_seqs$I21 <- substr(ortholog_seqs$sequence,21,21)ortholog_seqs$Q24 <- substr(ortholog_seqs$sequence,24,24)ortholog_seqs$F28 <- substr(ortholog_seqs$sequence,28,28)ortholog_seqs$D30 <- substr(ortholog_seqs$sequence,30,30)ortholog_seqs$K31 <- substr(ortholog_seqs$sequence,31,31)ortholog_seqs$H34 <- substr(ortholog_seqs$sequence,34,34)ortholog_seqs$E35 <- substr(ortholog_seqs$sequence,35,35)ortholog_seqs$E38 <- substr(ortholog_seqs$sequence,37,37)ortholog_seqs$D38 <- substr(ortholog_seqs$sequence,38,38)ortholog_seqs$Y41 <- substr(ortholog_seqs$sequence,41,41)ortholog_seqs$Q42 <- substr(ortholog_seqs$sequence,42,42)ortholog_seqs$L45 <- substr(ortholog_seqs$sequence,45,45)ortholog_seqs$N49 <- substr(ortholog_seqs$sequence,49,49)ortholog_seqs$M82 <- substr(ortholog_seqs$sequence,82,82)ortholog_seqs$Y83 <- substr(ortholog_seqs$sequence,83,83)ortholog_seqs$K353 <- substr(ortholog_seqs$sequence,353,353)ortholog_seqs$R357 <- substr(ortholog_seqs$sequence,357,357)ortholog_seqs$R393 <- substr(ortholog_seqs$sequence,393,393)## Some sites exhibited no variability in this dataset. I am removed these from the analysis.ortholog_seqs_variable_sites <- ortholog_seqs[,!(colnames(ortholog_seqs) %in% c("F28", "E38", "L45", "R357", "R393"))]ortholog_seqs_variable_sites_residues <- ortholog_seqs_variable_sites[,c(1,7:ncol(ortholog_seqs_variable_sites))]ortholog_variability_df <- data.frame("residue" = colnames(ortholog_seqs_variable_sites_residues)[2:ncol(ortholog_seqs_variable_sites_residues)])for(x in 2:ncol(ortholog_seqs_variable_sites_residues)){  unique(ortholog_seqs_variable_sites_residues[,2])}## Write those variable interface sites as strings so they can be considered as part of the distance matricesortholog_seqs_variable_sites_residues$concat <- ""for(x in 1:nrow(ortholog_seqs_variable_sites_residues)){ortholog_seqs_variable_sites_residues$concat[x] <- gsub("[^A-Z]","",toString(ortholog_seqs_variable_sites_residues[x,2:14]))}write.csv(file = "Output_tables/Orthologs.csv", ortholog_seqs_variable_sites_residues[,c("ortholog","concat")], col.names = F, row.names = F)``````{r}combined_ortholog_variant_unmelt <- rbind((ortholog1 %>% mutate(sample = ortholog))[,!colnames(ortholog1) %in% "ortholog"],(low_kozak1 %>% mutate(sample = mutant))[,!colnames(low_kozak1) %in% "mutant"])for(x in 1:nrow(combined_ortholog_variant_unmelt)){  for(y in 1:(ncol(combined_ortholog_variant_unmelt)-1)){    combined_ortholog_variant_unmelt[x,y] <- log10(combined_ortholog_variant_unmelt[x,y])  }}``````{r Calculate resiuals for particular ACE2 orthologs when comparing between pairs of SARS2 variants}sinicus_215_residuals <- all_residuals %>% filter(sample == "R.sinicus_215")Sinicus_215_residuals_plot <- ggplot() +   theme(panel.grid.major = element_blank(), panel.border = element_blank(), panel.background = element_blank(), axis.ticks = element_blank(),  legend.position = "none", axis.text.x.top = element_text(angle = 45, hjust = 0.2, vjust = 0)) +   labs(x = "R.sinicus_215", y = "Residuals (Blue is worse\nthan the other virus)") +  scale_fill_gradient2(low  = "blue", mid = "white", high = "red", limits = c(-1.4,1.4)) +  scale_x_discrete(position = "top") +  geom_tile(data = sinicus_215_residuals, aes(x = name1, y = name2, fill = residuals))ggsave(file = "Plots/Sinicus_215_residuals_plot.pdf", Sinicus_215_residuals_plot, height = 2, width = 2.3)landeri_residuals <- all_residuals %>% filter(sample == "R.landeri")landeri_residuals_plot <- ggplot() +   theme(panel.grid.major = element_blank(), panel.border = element_blank(), panel.background = element_blank(), axis.ticks = element_blank(),  legend.position = "none", axis.text.x.top = element_text(angle = 45, hjust = 0.2, vjust = 0)) +   labs(x = "R.landeri", y = "Residuals (Blue is worse\nthan the other virus)") +  scale_fill_gradient2(low  = "blue", mid = "white", high = "red", limits = c(-1.4,1.4)) +  scale_x_discrete(position = "top") +  geom_tile(data = landeri_residuals, aes(x = name1, y = name2, fill = residuals))ggsave(file = "Plots/Landeri_residuals_plot.pdf", landeri_residuals_plot, height = 1.7, width = 2)mouse_residuals <- all_residuals %>% filter(sample == "M.musculus")Mouse_residuals_plot <- ggplot() +   theme(panel.grid.major = element_blank(), panel.border = element_blank(), panel.background = element_blank(), axis.ticks = element_blank(),  legend.position = "none", axis.text.x.top = element_text(angle = 45, hjust = 0.2, vjust = 0)) +   labs(x = "M.musculus", y = "Residuals (Blue is worse\nthan the other virus)") +  scale_fill_gradient2(low  = "blue", mid = "white", high = "red", limits = c(-1.4,1.4)) +  scale_x_discrete(position = "top") +  geom_tile(data = mouse_residuals, aes(x = name1, y = name2, fill = residuals))ggsave(file = "Plots/Mouse_residuals_plot.pdf", Mouse_residuals_plot, height = 2, width = 2.3)sinicus_200_residuals <- all_residuals %>% filter(sample == "R.sinicus_200")Sinicus_200_residuals_plot <- ggplot() +   theme(panel.grid.major = element_blank(), panel.border = element_blank(), panel.background = element_blank(), axis.ticks = element_blank(),  legend.position = "none", axis.text.x.top = element_text(angle = 45, hjust = 0.2, vjust = 0)) +   labs(x = "R.sinicus_200", y = "Residuals (Blue is worse\nthan the other virus)") +  scale_fill_gradient2(low  = "blue", mid = "white", high = "red", limits = c(-1.4,1.4)) +  scale_x_discrete(position = "top") +  geom_tile(data = sinicus_200_residuals, aes(x = name1, y = name2, fill = residuals))ggsave(file = "Plots/Sinicus_200_residuals_plot.pdf", Sinicus_200_residuals_plot, height = 1.7, width = 2)pearsonii_residuals <- all_residuals %>% filter(sample == "R.pearsonii")Pearsonii_residuals_plot <- ggplot() +   theme(panel.grid.major = element_blank(), panel.border = element_blank(), panel.background = element_blank(), axis.ticks = element_blank(),  legend.position = "none", axis.text.x.top = element_text(angle = 45, hjust = 0.2, vjust = 0)) +   labs(x = "R.pearsonii", y = "Residuals (Blue is worse\nthan the other virus)") +  scale_fill_gradient2(low  = "blue", mid = "white", high = "red", limits = c(-1.4,1.4)) +  scale_x_discrete(position = "top") +  geom_tile(data = pearsonii_residuals, aes(x = name1, y = name2, fill = residuals))ggsave(file = "Plots/Pearsonii_residuals_plot.pdf", Pearsonii_residuals_plot, height = 2.3, width = 2.8)pig_residuals <- all_residuals %>% filter(sample == "S.scrofa")Pig_residuals_plot <- ggplot() +   theme(panel.grid.major = element_blank(), panel.border = element_blank(), panel.background = element_blank(), axis.ticks = element_blank(),  legend.position = "none", axis.text.x.top = element_text(angle = 45, hjust = 0.2, vjust = 0)) +   labs(x = "S.scrofa", y = "Residuals (Blue is worse\nthan the other virus)") +  scale_fill_gradient2(low  = "blue", mid = "white", high = "red", limits = c(-1.4,1.4)) +  scale_x_discrete(position = "top") +  geom_tile(data = pig_residuals, aes(x = name1, y = name2, fill = residuals))ggsave(file = "Plots/Pig_residuals_plot.pdf", Pig_residuals_plot, height = 2.3, width = 2.8)pangolin_residuals <- all_residuals %>% filter(sample == "M.javanica")Pangolin_residuals_plot <- ggplot() +   theme(panel.grid.major = element_blank(), panel.border = element_blank(), panel.background = element_blank(), axis.ticks = element_blank(),  legend.position = "none", axis.text.x.top = element_text(angle = 45, hjust = 0.2, vjust = 0)) +   labs(x = "M.javanica", y = "Residuals (Blue is worse\nthan the other virus)") +  scale_fill_gradient2(low  = "blue", mid = "white", high = "red", limits = c(-1.4,1.4)) +  scale_x_discrete(position = "top") +  geom_tile(data = pangolin_residuals, aes(x = name1, y = name2, fill = residuals))ggsave(file = "Plots/Pangolin_residuals_plot.pdf", Pangolin_residuals_plot, height = 1.7, width = 2)```


Amber-based energy minimization of the BA1-RBD: ACE2 structure (PDB: 7T9L) where Lys31 was computationally mutated to Asp predicted formation of a hydrogen bond, supporting this hypothesis. This was not observed with the other tested SARS-CoV-2 variants, likely because they encoded Gln493 at the comparable position.